// vite.config.mts
import react from "file:///workspaces/AiEXEC/web/node_modules/@vitejs/plugin-react-swc/index.mjs";
import * as dotenv from "file:///workspaces/AiEXEC/web/node_modules/dotenv/lib/main.js";
import {
  defineConfig,
  loadEnv,
} from "file:///workspaces/AiEXEC/web/node_modules/vite/dist/node/index.js";
import svgr from "file:///workspaces/AiEXEC/web/node_modules/vite-plugin-svgr/dist/index.js";
import tsconfigPaths from "file:///workspaces/AiEXEC/web/node_modules/vite-tsconfig-paths/dist/index.mjs";
import path from "path";

// src/customization/config-constants.ts
var BASENAME = "";
var PORT = 3e3;
var PROXY_TARGET = "http://localhost:7860";
var API_ROUTES = ["^/api/v1/", "^/api/v2/", "/health"];

// vite.config.mts
var __vite_injected_original_dirname = "/workspaces/AiEXEC/web";
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  const envAiexecResult = dotenv.config({
    path: path.resolve(__vite_injected_original_dirname, "../../.env"),
  });
  const envAiexec = envAiexecResult.parsed || {};
  const apiRoutes = API_ROUTES || ["^/api/v1/", "^/api/v2/", "/health"];
  const target =
    env.VITE_PROXY_TARGET || PROXY_TARGET || "http://localhost:7860";
  const port = Number(env.VITE_PORT) || PORT || 3e3;
  const proxyTargets = apiRoutes.reduce((proxyObj, route) => {
    proxyObj[route] = {
      target,
      changeOrigin: true,
      secure: false,
      ws: true,
    };
    return proxyObj;
  }, {});
  return {
    base: BASENAME || "",
    build: {
      outDir: "build",
    },
    define: {
      "process.env.BACKEND_URL": JSON.stringify(
        envAiexec.BACKEND_URL ?? "http://localhost:7860",
      ),
      "process.env.ACCESS_TOKEN_EXPIRE_SECONDS": JSON.stringify(
        envAiexec.ACCESS_TOKEN_EXPIRE_SECONDS ?? 60,
      ),
      "process.env.CI": JSON.stringify(envAiexec.CI ?? false),
      "process.env.AIEXEC_AUTO_LOGIN": JSON.stringify(
        envAiexec.AIEXEC_AUTO_LOGIN ?? true,
      ),
      "process.env.AIEXEC_FEATURE_MCP_COMPOSER": JSON.stringify(
        envAiexec.AIEXEC_FEATURE_MCP_COMPOSER ?? "false",
      ),
    },
    plugins: [react(), svgr(), tsconfigPaths()],
    server: {
      port,
      proxy: {
        ...proxyTargets,
      },
    },
  };
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInNyYy9jdXN0b21pemF0aW9uL2NvbmZpZy1jb25zdGFudHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvd29ya3NwYWNlcy9BaUVYRUMvd2ViXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvd29ya3NwYWNlcy9BaUVYRUMvd2ViL3ZpdGUuY29uZmlnLm10c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vd29ya3NwYWNlcy9BaUVYRUMvd2ViL3ZpdGUuY29uZmlnLm10c1wiO2ltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI7XG5pbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGRlZmluZUNvbmZpZywgbG9hZEVudiB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgc3ZnciBmcm9tIFwidml0ZS1wbHVnaW4tc3ZnclwiO1xuaW1wb3J0IHRzY29uZmlnUGF0aHMgZnJvbSBcInZpdGUtdHNjb25maWctcGF0aHNcIjtcbmltcG9ydCB7XG4gIEFQSV9ST1VURVMsXG4gIEJBU0VOQU1FLFxuICBQT1JULFxuICBQUk9YWV9UQVJHRVQsXG59IGZyb20gXCIuL3NyYy9jdXN0b21pemF0aW9uL2NvbmZpZy1jb25zdGFudHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4ge1xuICBjb25zdCBlbnYgPSBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCksIFwiXCIpO1xuXG4gIGNvbnN0IGVudkFpZXhlY1Jlc3VsdCA9IGRvdGVudi5jb25maWcoe1xuICAgIHBhdGg6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi4vLi4vLmVudlwiKSxcbiAgfSk7XG5cbiAgY29uc3QgZW52QWlleGVjID0gZW52QWlleGVjUmVzdWx0LnBhcnNlZCB8fCB7fTtcblxuICBjb25zdCBhcGlSb3V0ZXMgPSBBUElfUk9VVEVTIHx8IFtcIl4vYXBpL3YxL1wiLCBcIl4vYXBpL3YyL1wiLCBcIi9oZWFsdGhcIl07XG5cbiAgY29uc3QgdGFyZ2V0ID1cbiAgICBlbnYuVklURV9QUk9YWV9UQVJHRVQgfHwgUFJPWFlfVEFSR0VUIHx8IFwiaHR0cDovL2xvY2FsaG9zdDo3ODYwXCI7XG5cbiAgY29uc3QgcG9ydCA9IE51bWJlcihlbnYuVklURV9QT1JUKSB8fCBQT1JUIHx8IDMwMDA7XG5cbiAgY29uc3QgcHJveHlUYXJnZXRzID0gYXBpUm91dGVzLnJlZHVjZSgocHJveHlPYmosIHJvdXRlKSA9PiB7XG4gICAgcHJveHlPYmpbcm91dGVdID0ge1xuICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gICAgICBzZWN1cmU6IGZhbHNlLFxuICAgICAgd3M6IHRydWUsXG4gICAgfTtcbiAgICByZXR1cm4gcHJveHlPYmo7XG4gIH0sIHt9KTtcblxuICByZXR1cm4ge1xuICAgIGJhc2U6IEJBU0VOQU1FIHx8IFwiXCIsXG4gICAgYnVpbGQ6IHtcbiAgICAgIG91dERpcjogXCJidWlsZFwiLFxuICAgIH0sXG4gICAgZGVmaW5lOiB7XG4gICAgICBcInByb2Nlc3MuZW52LkJBQ0tFTkRfVVJMXCI6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBlbnZBaWV4ZWMuQkFDS0VORF9VUkwgPz8gXCJodHRwOi8vbG9jYWxob3N0Ojc4NjBcIixcbiAgICAgICksXG4gICAgICBcInByb2Nlc3MuZW52LkFDQ0VTU19UT0tFTl9FWFBJUkVfU0VDT05EU1wiOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgZW52QWlleGVjLkFDQ0VTU19UT0tFTl9FWFBJUkVfU0VDT05EUyA/PyA2MCxcbiAgICAgICksXG4gICAgICBcInByb2Nlc3MuZW52LkNJXCI6IEpTT04uc3RyaW5naWZ5KGVudkFpZXhlYy5DSSA/PyBmYWxzZSksXG4gICAgICBcInByb2Nlc3MuZW52LkFJRVhFQ19BVVRPX0xPR0lOXCI6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBlbnZBaWV4ZWMuQUlFWEVDX0FVVE9fTE9HSU4gPz8gdHJ1ZSxcbiAgICAgICksXG4gICAgICBcInByb2Nlc3MuZW52LkFJRVhFQ19GRUFUVVJFX01DUF9DT01QT1NFUlwiOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgZW52QWlleGVjLkFJRVhFQ19GRUFUVVJFX01DUF9DT01QT1NFUiA/PyBcImZhbHNlXCIsXG4gICAgICApLFxuICAgIH0sXG4gICAgcGx1Z2luczogW3JlYWN0KCksIHN2Z3IoKSwgdHNjb25maWdQYXRocygpXSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IHBvcnQsXG4gICAgICBwcm94eToge1xuICAgICAgICAuLi5wcm94eVRhcmdldHMsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59KTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL3dvcmtzcGFjZXMvQWlFWEVDL3dlYi9zcmMvY3VzdG9taXphdGlvblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL3dvcmtzcGFjZXMvQWlFWEVDL3dlYi9zcmMvY3VzdG9taXphdGlvbi9jb25maWctY29uc3RhbnRzLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy93b3Jrc3BhY2VzL0FpRVhFQy93ZWIvc3JjL2N1c3RvbWl6YXRpb24vY29uZmlnLWNvbnN0YW50cy50c1wiO2V4cG9ydCBjb25zdCBCQVNFTkFNRSA9IFwiXCI7XG5leHBvcnQgY29uc3QgUE9SVCA9IDMwMDA7XG5leHBvcnQgY29uc3QgUFJPWFlfVEFSR0VUID0gXCJodHRwOi8vbG9jYWxob3N0Ojc4NjBcIjtcbmV4cG9ydCBjb25zdCBBUElfUk9VVEVTID0gW1wiXi9hcGkvdjEvXCIsIFwiXi9hcGkvdjIvXCIsIFwiL2hlYWx0aFwiXTtcbmV4cG9ydCBjb25zdCBCQVNFX1VSTF9BUEkgPSBcIi9hcGkvdjEvXCI7XG5leHBvcnQgY29uc3QgQkFTRV9VUkxfQVBJX1YyID0gXCIvYXBpL3YyL1wiO1xuZXhwb3J0IGNvbnN0IEhFQUxUSF9DSEVDS19VUkwgPSBcIi9oZWFsdGhfY2hlY2tcIjtcbmV4cG9ydCBjb25zdCBET0NTX0xJTksgPSBcImh0dHBzOi8vZG9jcy5haWV4ZWMub3JnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgRE9DU19MSU5LLFxuICBCQVNFTkFNRSxcbiAgUE9SVCxcbiAgUFJPWFlfVEFSR0VULFxuICBBUElfUk9VVEVTLFxuICBCQVNFX1VSTF9BUEksXG4gIEJBU0VfVVJMX0FQSV9WMixcbiAgSEVBTFRIX0NIRUNLX1VSTCxcbn07XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXNQLE9BQU8sV0FBVztBQUN4USxZQUFZLFlBQVk7QUFDeEIsT0FBTyxVQUFVO0FBQ2pCLFNBQVMsY0FBYyxlQUFlO0FBQ3RDLE9BQU8sVUFBVTtBQUNqQixPQUFPLG1CQUFtQjs7O0FDTGlTLElBQU0sV0FBVztBQUNyVSxJQUFNLE9BQU87QUFDYixJQUFNLGVBQWU7QUFDckIsSUFBTSxhQUFhLENBQUMsYUFBYSxhQUFhLFNBQVM7OztBREg5RCxJQUFNLG1DQUFtQztBQWF6QyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxFQUFFLEtBQUssTUFBTTtBQUN4QyxRQUFNLE1BQU0sUUFBUSxNQUFNLFFBQVEsSUFBSSxHQUFHLEVBQUU7QUFFM0MsUUFBTSxrQkFBeUIsY0FBTztBQUFBLElBQ3BDLE1BQU0sS0FBSyxRQUFRLGtDQUFXLFlBQVk7QUFBQSxFQUM1QyxDQUFDO0FBRUQsUUFBTSxZQUFZLGdCQUFnQixVQUFVLENBQUM7QUFFN0MsUUFBTSxZQUFZLGNBQWMsQ0FBQyxhQUFhLGFBQWEsU0FBUztBQUVwRSxRQUFNLFNBQ0osSUFBSSxxQkFBcUIsZ0JBQWdCO0FBRTNDLFFBQU0sT0FBTyxPQUFPLElBQUksU0FBUyxLQUFLLFFBQVE7QUFFOUMsUUFBTSxlQUFlLFVBQVUsT0FBTyxDQUFDLFVBQVUsVUFBVTtBQUN6RCxhQUFTLEtBQUssSUFBSTtBQUFBLE1BQ2hCO0FBQUEsTUFDQSxjQUFjO0FBQUEsTUFDZCxRQUFRO0FBQUEsTUFDUixJQUFJO0FBQUEsSUFDTjtBQUNBLFdBQU87QUFBQSxFQUNULEdBQUcsQ0FBQyxDQUFDO0FBRUwsU0FBTztBQUFBLElBQ0wsTUFBTSxZQUFZO0FBQUEsSUFDbEIsT0FBTztBQUFBLE1BQ0wsUUFBUTtBQUFBLElBQ1Y7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLDJCQUEyQixLQUFLO0FBQUEsUUFDOUIsVUFBVSxlQUFlO0FBQUEsTUFDM0I7QUFBQSxNQUNBLDJDQUEyQyxLQUFLO0FBQUEsUUFDOUMsVUFBVSwrQkFBK0I7QUFBQSxNQUMzQztBQUFBLE1BQ0Esa0JBQWtCLEtBQUssVUFBVSxVQUFVLE1BQU0sS0FBSztBQUFBLE1BQ3RELGlDQUFpQyxLQUFLO0FBQUEsUUFDcEMsVUFBVSxxQkFBcUI7QUFBQSxNQUNqQztBQUFBLE1BQ0EsMkNBQTJDLEtBQUs7QUFBQSxRQUM5QyxVQUFVLCtCQUErQjtBQUFBLE1BQzNDO0FBQUEsSUFDRjtBQUFBLElBQ0EsU0FBUyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsY0FBYyxDQUFDO0FBQUEsSUFDMUMsUUFBUTtBQUFBLE1BQ047QUFBQSxNQUNBLE9BQU87QUFBQSxRQUNMLEdBQUc7QUFBQSxNQUNMO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
